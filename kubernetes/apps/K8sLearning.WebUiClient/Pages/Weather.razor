@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>Host: @host</p>
<div>
    Addresses:
    @if (@addresses != null)
    {
        <ul>
            @foreach (var a in @addresses)
            {
                <li>@a</li>
            }
        </ul>
    }
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast> forecasts;
    private string host;
    private IEnumerable<string> addresses;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<WeatherForecastResponse>("/weatherforecast");
        host = response.Host;
        addresses = response.Addr;
        forecasts = response.Data;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public class WeatherForecastResponse
    {
        public IEnumerable<string> Addr { get; set; }
        public string Host { get; set; }
        public IEnumerable<WeatherForecast> Data { get; set; }
    }
}
